/// <reference path="../Game.d.ts" />
/// <reference path="../Basic.d.ts" />
/// <reference path="../Signal.d.ts" />
module Phaser {
    class GameObject extends Basic {
        constructor(game: Game, x?: number, y?: number, width?: number, height?: number);
        private _angle;
        static ALIGN_TOP_LEFT: number;
        static ALIGN_TOP_CENTER: number;
        static ALIGN_TOP_RIGHT: number;
        static ALIGN_CENTER_LEFT: number;
        static ALIGN_CENTER: number;
        static ALIGN_CENTER_RIGHT: number;
        static ALIGN_BOTTOM_LEFT: number;
        static ALIGN_BOTTOM_CENTER: number;
        static ALIGN_BOTTOM_RIGHT: number;
        static OUT_OF_BOUNDS_STOP: number;
        static OUT_OF_BOUNDS_KILL: number;
        public _point: MicroPoint;
        public cameraBlacklist: number[];
        public bounds: Rectangle;
        public worldBounds: Quad;
        public outOfBoundsAction: number;
        public align: number;
        public facing: number;
        public alpha: number;
        public scale: MicroPoint;
        public origin: MicroPoint;
        public z: number;
        public rotationOffset: number;
        public renderRotation: bool;
        public immovable: bool;
        public velocity: MicroPoint;
        public mass: number;
        public elasticity: number;
        public acceleration: MicroPoint;
        public drag: MicroPoint;
        public maxVelocity: MicroPoint;
        public angularVelocity: number;
        public angularAcceleration: number;
        public angularDrag: number;
        public maxAngular: number;
        public scrollFactor: MicroPoint;
        public health: number;
        public moves: bool;
        public touching: number;
        public wasTouching: number;
        public allowCollisions: number;
        public last: MicroPoint;
        public inputEnabled: bool;
        private _inputOver;
        public onInputOver: Signal;
        public onInputOut: Signal;
        public onInputDown: Signal;
        public onInputUp: Signal;
        public preUpdate(): void;
        public update(): void;
        public postUpdate(): void;
        private updateInput();
        private updateMotion();
        public overlaps(ObjectOrGroup, InScreenSpace?: bool, Camera?: Camera): bool;
        public overlapsAt(X: number, Y: number, ObjectOrGroup, InScreenSpace?: bool, Camera?: Camera): bool;
        public overlapsPoint(point: Point, InScreenSpace?: bool, Camera?: Camera): bool;
        public onScreen(Camera?: Camera): bool;
        public getScreenXY(point?: MicroPoint, Camera?: Camera): MicroPoint;
        public solid : bool;
        public getMidpoint(point?: MicroPoint): MicroPoint;
        public reset(X: number, Y: number): void;
        public isTouching(Direction: number): bool;
        public justTouched(Direction: number): bool;
        public hurt(Damage: number): void;
        public setBounds(x: number, y: number, width: number, height: number): void;
        public hideFromCamera(camera: Camera): void;
        public showToCamera(camera: Camera): void;
        public clearCameraList(): void;
        public destroy(): void;
        public x : number;
        public y : number;
        public rotation : number;
        public angle : number;
        public width : number;
        public height : number;
    }
}
